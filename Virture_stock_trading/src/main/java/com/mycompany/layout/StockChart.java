/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.layout;

import com.mycompany.SingletonPattern.Stock;
import com.mycompany.SingletonPattern.User;
import com.mycompany.StatePattern.Manager;
import com.mycompany.Stocksearch.GoogleFinanceCrawler;
import com.mycompany.Stocksearch.TESTca;
import com.mycompany.Stocksearch.TickerCreator;
import com.mycompany.StrategyPattern.BuyStrategy;
import com.mycompany.StrategyPattern.SellStrategy;
import com.mycompany.StrategyPattern.TradeClient;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 *
 * @author yunch
 */
public class StockChart extends javax.swing.JFrame {

    public static boolean power = true;
    TESTca th;
    User user = User.getInstance();

    /**
     * Creates new form stockchart
     */
    public StockChart(String stockName) {
        //GoogleFinanceCrawler crawler = new GoogleFinanceCrawler(stockName);
        th = new TESTca(stockName);
        th.start();
        System.out.print("Ddd");
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        stock_name = new javax.swing.JLabel();
        Live_Stock_Price = new javax.swing.JLabel();
        buy_stock = new javax.swing.JRadioButton();
        sell_stock = new javax.swing.JRadioButton();
        Confirm = new javax.swing.JButton();
        DayChart = new javax.swing.JButton();
        WeekChart = new javax.swing.JButton();
        MonthChart = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        stock_label = new javax.swing.JLabel();

        buttonGroup1.add(buy_stock);
        buttonGroup1.add(sell_stock);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        Live_Stock_Price.setText(" ");

        buy_stock.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        buy_stock.setText("구매");
        buy_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buy_stockActionPerformed(evt);
            }
        });

        sell_stock.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        sell_stock.setText("판매");

        Confirm.setText("주문하기");
        Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmActionPerformed(evt);
            }
        });

        DayChart.setText("일봉");
        DayChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayChartActionPerformed(evt);
            }
        });

        WeekChart.setText("주봉");
        WeekChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeekChartActionPerformed(evt);
            }
        });

        MonthChart.setText("월봉");
        MonthChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthChartActionPerformed(evt);
            }
        });

        jButton1.setText("관심목록 추가");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        stock_label.setMaximumSize(new java.awt.Dimension(700, 289));
        stock_label.setMinimumSize(new java.awt.Dimension(700, 289));
        stock_label.setPreferredSize(new java.awt.Dimension(700, 289));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Live_Stock_Price, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stock_name, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DayChart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WeekChart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MonthChart)
                                .addGap(106, 106, 106)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(stock_label, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Confirm)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(sell_stock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buy_stock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(stock_name, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Live_Stock_Price, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DayChart)
                            .addComponent(WeekChart)
                            .addComponent(MonthChart)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(sell_stock))
                        .addComponent(buy_stock))
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(Confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(stock_label, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmActionPerformed
        // 트레이드 객체 생성
        TradeClient tradeClient = new TradeClient();
        ///////// 주식 객체 생성 및 값 넣기 
        Stock stock = new Stock();
        //스테이트 객체 생성

        Manager m = new Manager();
        String currencyValue = Live_Stock_Price.getText();
        double convertedValue = Double.parseDouble(currencyValue.replaceAll("[^0-9.-]", ""));
        stock.setName(stock_name.getText());
        stock.setPrice(convertedValue);

        if (buy_stock.isSelected()) { //buy_stock 버튼 활성화 시
            m.checkState(stock, User.getInstance());
            if (power) {
                System.out.print("power들어옴");
                System.out.println(stock.getQuantity());
                tradeClient.setTradeStrategy(new BuyStrategy());
                tradeClient.executeTrade(stock, user);
            }

        } else if (sell_stock.isSelected()) {
            System.out.println("sell 들어옴 ");
            String WithdrawalMoney = JOptionPane.showInputDialog(null, "매도 하실 개수를 입력해주세요 ");
            Double WithdrawalMoney_D = Double.valueOf(WithdrawalMoney);
            int Stock_Quantity = (int) Math.round(WithdrawalMoney_D);
            stock.setQuantity(Stock_Quantity);
            tradeClient.setTradeStrategy(new SellStrategy());
            tradeClient.executeTrade(stock, user);
        }
    }//GEN-LAST:event_ConfirmActionPerformed

    private void WeekChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeekChartActionPerformed

       
       Stock stock = new Stock();
       stock.setName(stock_name.getText());
       TickerCreator TC = null;
        try {
            TC = new TickerCreator(stock.getName());
        } catch (IOException ex) {
            Logger.getLogger(StockChart.class.getName()).log(Level.SEVERE, null, ex);
        }
       String stockCode= TC.getStockCode();
        
        String filename = "./image_week/"+stockCode +"_chart.png";
        File f = new File(filename);
        System.out.println(f.exists());
        System.out.println(f.getPath());
         System.out.println(stockCode);
        ImageIcon icon = new ImageIcon(filename);
        stock_label.setIcon(icon);
        add(stock_label);
        
        
        
    }//GEN-LAST:event_WeekChartActionPerformed

    private void buy_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buy_stockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buy_stockActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling cod
        th.stop();
        System.out.print("창 닫힘 ");
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (user.getWishStocks() == null) {
            JSONArray newStock = new JSONArray();
            JSONObject wishStock = new JSONObject();
            wishStock.put("Name", stock_name.getText());

            newStock.add(wishStock);
            user.putWishStocks(newStock);
            
            JOptionPane.showMessageDialog(this, "관심목록에 추가하였습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);
            System.out.println(user.getWishStocks());
        } else {
            JSONObject wishStock = new JSONObject();
            wishStock.put("Name", stock_name.getText());
            user.setWishStocks(wishStock);
            JOptionPane.showMessageDialog(this, "관심목록에 추가하였습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);
            System.out.println(user.getWishStocks());
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void DayChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayChartActionPerformed
   
       
       Stock stock = new Stock();
       stock.setName(stock_name.getText());
       TickerCreator TC = null;
        try {
            TC = new TickerCreator(stock.getName());
        } catch (IOException ex) {
            Logger.getLogger(StockChart.class.getName()).log(Level.SEVERE, null, ex);
        }
       String stockCode= TC.getStockCode();
        
        String filename = "./image_day/"+stockCode +"_chart.png";
        File f = new File(filename);
        System.out.println(f.exists());
        System.out.println(f.getPath());
         System.out.println(stockCode);
        ImageIcon icon = new ImageIcon(filename);
        stock_label.setIcon(icon);
        add(stock_label);
        
        
        
        
    }//GEN-LAST:event_DayChartActionPerformed

    private void MonthChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthChartActionPerformed
               Stock stock = new Stock();
       stock.setName(stock_name.getText());
       TickerCreator TC = null;
        try {
            TC = new TickerCreator(stock.getName());
        } catch (IOException ex) {
            Logger.getLogger(StockChart.class.getName()).log(Level.SEVERE, null, ex);
        }
       String stockCode= TC.getStockCode();
        
        String filename = "./image_month/"+stockCode +"_chart.png";
        File f = new File(filename);
        System.out.println(f.exists());
        System.out.println(f.getPath());
         System.out.println(stockCode);
        ImageIcon icon = new ImageIcon(filename);
        stock_label.setIcon(icon);
        add(stock_label);        // TODO add your handling code here:
    }//GEN-LAST:event_MonthChartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new StockChart(stock_name.getText()).setVisible(true);
            }
        });
    }

    public void setStock_name(String stock_name) {
        this.stock_name.setText(stock_name);
    }

    public void setStock_price(String stock_price) {
        this.Live_Stock_Price.setText(stock_price);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Confirm;
    private javax.swing.JButton DayChart;
    public static javax.swing.JLabel Live_Stock_Price;
    private javax.swing.JButton MonthChart;
    private javax.swing.JButton WeekChart;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton buy_stock;
    private javax.swing.JButton jButton1;
    private javax.swing.JRadioButton sell_stock;
    private javax.swing.JLabel stock_label;
    private javax.swing.JLabel stock_name;
    // End of variables declaration//GEN-END:variables
}
